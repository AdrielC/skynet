http {

  host = "0.0.0.0"
  host = ${?HTTP_HOST}

  port = 80
  port = ${?HTTP_PORT}

  ## http4s default = 30 seconds
  response-timeout = 30 seconds
  response-timeout = ${?HTTP_RESPONSE_TIMEOUT}

  ## http4s default = 60 seconds
  idle-timeout = 60 seconds
  idle-timeout = ${?HTTP_IDLE_TIMEOUT}

  connector-pool-size = ${?HTTP_CONNECTOR_POOL_SIZE}

  max-connections = 1024
  max-connections = ${?HTTP_MAX_CONNECTIONS}

  chunk-factor = 20
  chunk-factor = ${?HTTP_CHUNK_FACTOR}

  ## This executor is used for the http async event loop
  ## Used if all configs are set, server default is used otherwise
  executor {

    select = ${?ASYNC_THREAD_FACTORY_NAME}

    executors {

      skynet-async = {
         ## the number of tasks a thread will perform before yielding to a new thread
         yield-op-count = 2048
         yield-op-count = ${?ASYNC_YIELD_OP_COUNT}

         ## the number of threads to keep in the pool, even if they are idle, unless allow-core-timeout is set
         # valid core-pool-size >= 0
         core-pool-size = x1
         core-pool-size = ${?ASYNC_CORE_POOL_SIZE}

         ## valid max-pool-size >= core-pool-size
         max-pool-size = x3
         max-pool-size = ${?ASYNC_MAX_POOL_SIZE}

         ## when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating
         ## valid 0 <= keep-alive-time < Inf
         keep-alive-time = 10 seconds
         keep-alive-time = ${?ASYNC_KEEP_ALIVE_TIME}

         allow-core-timeout = false
         allow-core-timeout = ${?ASYNC_ALLOW_CORE_TIMEOUT}

         prestart-core = false
         prestart-core = ${?ASYNC_PRESTART_CORE}
      }
    }
 }


  routes {

  }
}


swagger {
  yaml-name = "swagger.yaml"
  context-path = ["docs"]
}

model {

  execution-strategy = par-12
  execution-strategy = ${?MODEL_EXECUTION_STRATEGY}

  warmup-rows = 200
  warmup-rows = ${?MODEL_WARMUP_ROWS}

  models = {

  }

  repo = [
    file
    s3,
    gs
  ]

  executor {

    select = ${?BLOCKING_THREAD_FACTORY_NAME}

    executors = {

      skynet-blocking = {

        ## the number of tasks a thread will perform before yielding to a new thread
        yield-op-count = 1000000
        yield-op-count = ${?BLOCKING_YIELD_OP_COUNT}

        ## the number of threads to keep in the pool, even if they are idle, unless allow-core-timeout is set
        # valid core-pool-size >= 0
        core-pool-size = 1
        core-pool-size = ${?BLOCKING_CORE_POOL_SIZE}

        ## valid max-pool-size >= core-pool-size
        max-pool-size = 1000000
        max-pool-size = ${?BLOCKING_MAX_POOL_SIZE}

        ## when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating
        ## valid 0 <= keep-alive-time < Inf
        keep-alive-time = 1 minute
        keep-alive-time = ${?BLOCKING_KEEP_ALIVE_TIME}

        allow-core-timeout = false
        allow-core-timeout = ${?BLOCKING_ALLOW_CORE_TIMEOUT}

        prestart-core = false
        prestart-core = ${?BLOCKING_PRESTART_CORE}
      }

      skynet-yield-blocking = {

        ## the number of tasks a thread will perform before yielding to a new thread
        yield-op-count = 100
        yield-op-count = ${?BLOCKING_YIELD_OP_COUNT}

        ## the number of threads to keep in the pool, even if they are idle, unless allow-core-timeout is set
        # valid core-pool-size >= 0
        core-pool-size = 2
        core-pool-size = ${?BLOCKING_CORE_POOL_SIZE}

        ## valid max-pool-size >= core-pool-size
        max-pool-size = 500
        max-pool-size = ${?BLOCKING_MAX_POOL_SIZE}

        ## when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating
        ## valid 0 <= keep-alive-time < Inf
        keep-alive-time = 30 seconds
        keep-alive-time = ${?BLOCKING_KEEP_ALIVE_TIME}

        allow-core-timeout = false
        allow-core-timeout = ${?BLOCKING_ALLOW_CORE_TIMEOUT}

        prestart-core = false
        prestart-core = ${?BLOCKING_PRESTART_CORE}
      }
    }
  }
}

com.overstock.skynet.ops = [
  "ml.combust.mleap.xgboost.runtime.ops.XGBoostPredictorClassificationOp",
  "ml.combust.mleap.xgboost.runtime.ops.XGBoostPredictorRegressionOp",
  "ml.combust.mleap.runtime.MultiWordToVectorOp"
]

ml.combust.mleap.registry.default.ops += "com.overstock.skynet.ops"